# Пузырьковая сортировка 
def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr
# 10 списков случайной длины
import random
import time

def generate_random_list():
    return [random.randint(0, 10000) for _ in range(random.randint(1000, 10000))]

# Сравнение функций сортировки
for i in range(10):
    lst = generate_random_list()
    
    start = time.time()
    bubble_sort(lst)
    end = time.time()
    bubble_sort_time = end - start
    
    start = time.time()
    sorted(lst)
    end = time.time()
    sorted_time = end - start
    
    print(f"List {i+1}:\nBubble sort: {bubble_sort_time:.6f} sec\nSorted: {sorted_time:.6f} sec\n")
# Результат:
List 1:
Bubble sort: 3.067760 sec
Sorted: 0.000041 sec

List 2:
Bubble sort: 2.949740 sec
Sorted: 0.000027 sec

List 3:
Bubble sort: 3.076743 sec
Sorted: 0.000042 sec

List 4:
Bubble sort: 2.945500 sec
Sorted: 0.000027 sec

List 5:
Bubble sort: 2.889856 sec
Sorted: 0.000026 sec

List 6:
Bubble sort: 3.223537 sec
Sorted: 0.000030 sec

List 7:
Bubble sort: 3.014051 sec
Sorted: 0.000027 sec

List 8:
Bubble sort: 2.870687 sec
Sorted: 0.000027 sec

List 9:
Bubble sort: 2.966249 sec
Sorted: 0.000027 sec

List 10:
Bubble sort: 3.098466 sec
Sorted: 0.000028 sec


# время выполнения пузырьковой сортировки значительно больше, чем встроенной функции sorted, для больших списков пузырьковая сортировка неэффективна
