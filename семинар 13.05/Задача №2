# без использования сортировки
def count_inversions(arr):
    n = len(arr)
    count = 0
    for i in range(n):
        for j in range(i+1, n):
            if arr[i] > arr[j]:
                count += 1
    return count


#  с использованием сортировки методом слияния
def count_inversions(arr):
    def merge(arr, temp_arr, left, mid, right):
        i = left
        j = mid+1
        k = left
        inv_count = 0
        
        while i <= mid and j <= right:
            if arr[i] <= arr[j]:
                temp_arr[k] = arr[i]
                i += 1
            else:
                temp_arr[k] = arr[j]
                j += 1
                inv_count += mid-i+1
            k += 1
        
        while i <= mid:
            temp_arr[k] = arr[i]
            k += 1
            i += 1
        
        while j <= right:
            temp_arr[k] = arr[j]
            k += 1
            j += 1
        
        for i in range(left, right+1):
            arr[i] = temp_arr[i]
        
        return inv_count
        
    def merge_sort(arr, temp_arr, left, right):
        inv_count = 0
        if left < right:
            mid = (left+right) // 2
            inv_count += merge_sort(arr, temp_arr, left, mid)
            inv_count += merge_sort(arr, temp_arr, mid+1, right)
            inv_count += merge(arr, temp_arr, left, mid, right)
        return inv_count
    
    n = len(arr)
    temp_arr = [0] * n
    return merge_sort(arr, temp_arr, 0, n-1)

# анализ 
import random
import time

arr_lengths = [100, 1000, 10000, 100000]

for n in arr_lengths:
    arr = [random.randint(0, 100000) for _ in range(n)]
    
    start_time = time.time()
    inv_count = count_inversions(arr)
    end_time = time.time()
    print(f"Without sorting: n={n}, inversions={inv_count}, time={end_time - start_time}")
    
    start_time = time.time()
    inv_count = count_inversions_merge(arr)
    end_time = time.time()
    print(f"With sorting: n={n}, inversions={inv_count}, time={end_time - start_time}")
